{"/end_user/examples/ahuExample":{"title":"Ontology Example","data":{"":"HomeOverview [#overview]Project Haystack is an open source suite of technologies for modeling IoT data.\nThe stack of technologies includes:\n[Data Types]#dataTypes: a fixed set of data types for modeling information\n[File Types]#fileTypes: a set of text formats to encode and exchange those data types\n[HTTP API]#httpApi: a protocol to exchange data over HTTP using those file types\n[Ontology]#ontology: a standard way to model common concepts such as buildings,\nequipment, and sensors\n[Defs]#defs: a standard way to define and extend the ontology\n\nIndividual aspects of the technology stack can be used on their own.  For\nexample you can use the Haystack data types as an \"enhanced JSON\".  Or you\ncould use just the terms in the ontology without the Haystack data types.Data Types [#dataTypes]Haystack defines a fixed set of general purpose data types we call kinds to\nfacilitate the interoperable exchange of data.  These data types include the\nbasics like strings and numbers, as well as common types for times and dates.\nThree collection types are defined: lists, dicts (hashmaps), and grids (tables).You can think of Haystack as an extended version of JSON.  Haystack supports\nthe JSON data types directly: boolean, strings, numbers, lists, and objects (dicts).\nBut Haystack adds first class types for time, URIs, references, and units of\nmeasurement.The primary collection type is the dict (short for dictionary) which is a\nset of name/value pairs we call tags.  Dict is the Haystack term for an\nassociative array, hashmap, or JSON object.  Haystack models entities like\nbuildings and sensors using dicts.  The tags of the dict inform what type\nof entity is modeled and facts about that entity.Haystack includes a special data type we call marker.  Markers are tag names\nwithout a value.  Instead it is the presence of the marker name that is semantically\nmeaningful.  Markers are used for typing dicts.  For example if a dict models\na building then we use the marker tag site; or if a dict models an electric\nmeter than we use the combination of markers tags elec-meter.These data types are discussed in detail in the Kinds chapter.File Types [#fileTypes]A standard suite of text formats is defined to exchange the Haystack data types.\nThese formats are self describing to ensure that all data types will round-trip\nthrough the encoding/decoding process without loss of typing information.The following file types are standardized:\n[Zinc]Zinc: a strongly typed CSV tabular data format\n[Json]Json: Haystack mapping to JSON data types\n[Trio]Trio: a YAML like format used for hand written data\n[CSV]Csv: one-way mapping to comma separated values (typing is lost)\n[RDF]Rdf: two RDF export formats are defined - Turtle and JSON-LD\n\nThe file types are discussed further in the Filetypes chapter.HTTP API [#httpApi]A simple HTTP protocol is specified by Haystack to facilitate exchanging\ndata between servers and devices.  The protocol is based on a set of\nops (short for operations) that provide a RPC mechanism to send a request\nand receive a response as grids encoded in one of the supported file types.\nIncluded in the specification is a pluggable SCRAM based [authentication]Auth\nprotocol.Some of the standard ops used for common IoT data exchanges:\n'read': query entity data about buildings, rooms, or sensors\n'hisRead': read historized time-series point data\n'hisWrite': push historized time-series to a remote system\n'watchSub': subscribe to real-time sensor data\n\nOntology [#ontology]Project Haystack is focused on the semantic data model for the\n[IoT]https://en.wikipedia.org/wiki/Internet_of_things and the\n[built environment]https://en.wikipedia.org/wiki/Built_environment.\nWe specify an ontology to standardize modeling of common\nconcepts in this domain including:\n[site]Sites: a single building or location of equipment/sensors\n[space]Spaces: a floor, room, HVAC zone, lighting zone, etc\n[equip]Equips: a physical asset such as a meter, air handler, boiler, etc\n[point]Points: a sensor, setpoint, or actuator\n[device]Devices: microprocessor based hardware such as controllers, networking gear, etc\n[weather]Weather: weather observations for temperature, humidity, precipitation, etc\n\nEach of these top-level concepts includes a taxonomy tree for more specific types.\nFor example, the term space is the root of the taxonomy that includes floor,\nroom, and zones.  All the concepts modeled in our ontology are formalized\ninto a vocabulary of terms that map to the tags used in dicts.Let's illustrate with a simple example.  This a dict that models a building:id: @whitehouse\ndis: \"White House\"\nsite\narea: 55000ftÂ²\ngeoAddr: \"1600 Pennsylvania Avenue NW,  Washington, DC\"\ntz: \"New_York\"\nweatherStationRef: @weather.washingtonEach line represents a tag (name/value) pair. Each tags tells us\nsomething about this entity:\nid: primary key for this data item (within its data set)\ndis: human display name for the data item\nsite: marker tag that tells us this data represents a building\narea: square footage of the building\ngeoAddr: street address of the building\ntz: timezone to use for this building\nweatherStationRef: relationship for which weather station to use for this building\n\nThese concepts are explored further in the Ontology chapter and the\nindividual chapters for specific systems.Defs [#defs]Defs (or definitions) are the mechanism by which we formally define our\nontology.  Defs are used to define the semantics for each tag including:\nvalue type (marker, string, number, etc)\nthe supertype (for example a more specific type of space, equip, etc)\nhuman description for the tag\nontological relationships for how tags relate to one another\n\nBy precisely defining every tag, we ensure that there is a common understanding\nfor the semantics of a Haystack data model.  In our example above, we know that dict\nrepresents a building (the site tag) and that the area tag tells us the\nsquare footage of the building.Defs are themselves just a dict that uses a standard set of meta tags\nfor their definition.  This means defs are also normal Haystack data.\nFor example, the def for the floor tag is itself a dict of the following tags:def: ^floor\nis: ^space\nwikipedia: https://en.wikipedia.org/wiki/Storey\ndoc: \"Storey of a building\"Defs, and the mechanisms used to construct the ontology, are introduced in\ndetail in the Defs chapter."}},"/":{"title":"Home","data":{"":"Project-Haystack has created Haystack 4.0 in order to not only define entities themselves, but define their structure and relationships as well.","what-is-vocabulary-ontology-and-taxonomy#What is Vocabulary, Ontology, and Taxonomy?":"","vocabulary#Vocabulary":"Vocabulary refers to the words and terms that are used in a specific field or subject area. It is the set of terms and definitions that are used to communicate and understand concepts within that field.Example: AHU, Meter, VAV, etc","taxonomy#Taxonomy":"Taxonomy is the practice of classifying and organizing things into a hierarchy or system. In the context of biology, taxonomy is the science of classifying and naming living organisms according to their characteristics and evolutionary relationships.\nIn information science, taxonomy refers to the practice of organizing and categorizing content in a logical and hierarchical manner. Project Haystack defines this heirarchy with Supertypes and Subtypes, creating a parent/child tree with the PHIoT Entities.Example: Entity -> Equip -> airHandlingEquip -> AHU","ontology#Ontology":"Ontology refers to a formal representation of the concepts and relationships within a specific domain of knowledge. An ontology is a set of concepts and categories in a domain, and the relationships between them. It is used to represent the structure and meaning of knowledge in a particular area, and to facilitate the exchange of information between systems."}},"/end_user/euHome":{"title":"Euhome","data":{"":""}},"/developer/devHome":{"title":"Devhome","data":{"":"Dev Docs"}}}